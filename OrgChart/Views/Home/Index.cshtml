@using Microsoft.WindowsAzure.ActiveDirectory.GraphHelper;
@using OrgChart.Models;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;

@{
    ViewBag.Title = "Home Page";
}

@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@ViewBag.Title</h1>
                <h2>@ViewBag.Message</h2>
            </hgroup>
            <p>
                Queries TBD
            </p>
        </div>
    </section>
}

@if (ViewBag.ancestorsAndMainPerson != null)
{
<table id="Splitter">
<tr>
<table id="ManagerList">
	<tr>
		<th></th>
        <th>displayName (mailNickname)<br />jobTitle</th>
    </tr>
@for (int i = 0; i < ViewBag.ancestorsAndMainPerson.Count - 1; i++)
{
	<tr class="highlightable">
    @foreach (JObject user in ViewBag.ancestorsAndMainPerson[i])
    {
		<td style="display:none">@user["mailNickname"]</td>
        <td class="tdPersonDescription">
            <img style="MAX-WIDTH: 32px; VERTICAL-ALIGN: bottom; MARGIN: 1px 4px 0px 0px; MAX-HEIGHT: 24px" 
                 src=@(String.Format("{0}{1}{2}", "http://who/photos/", @user["mailNickname"], ".jpg")) 
                 alt="@user["mailNickname"]"/>
        </td>
        <td class="tdPersonDescription">
            <a href="/?upn=@user["userPrincipalName"]">@user["displayName"]</a> 
            (@user["mailNickname"])<br />
            @user["jobTitle"]
        </td>
    }
	</tr>
}
</table>

<table id="MainPerson">
	<tr class="highlightable">
@{
List<List<JObject>> ancestorsAndMainPerson = ViewBag.ancestorsAndMainPerson;
if (ancestorsAndMainPerson.Count > 0)
{
    foreach (JObject user in ViewBag.ancestorsAndMainPerson[ViewBag.ancestorsAndMainPerson.Count - 1])
    {
		<td style="display:none">@user["mailNickname"]</td>
		<td class="tdPersonImage">
            <img style="MAX-WIDTH: 110px; VERTICAL-ALIGN: bottom; MARGIN: 8px 10px 8px 10px; MAX-HEIGHT: 100px" 
			     src=@(String.Format("{0}{1}{2}", "http://who/photos/", @user["mailNickname"], ".jpg")) 
			     alt="@user["mailNickname"]"/>
		</td>
		<td class="tdPersonDescription">
            <a href="/?upn=@user["userPrincipalName"]">
                @user["displayName"]
            </a> 
            (@user["mailNickname"])<br />
            @user["jobTitle"]
            @if (user[StringConstants.getExtension("skype")] != null)
            {
                <br />
                <script type="text/javascript" src="http://www.skypeassets.com/i/scom/js/skype-uri.js"></script>
                <div id="SkypeButton_Call_mailmongoose_1">
                <script type="text/javascript">
                    Skype.ui({
                        "name": "call",
                        "element": "SkypeButton_Call_mailmongoose_1",
                        "participants": ["@user[StringConstants.getExtension("skype")]"],
                        "imageSize": 32
                    });
                </script>
                </div>
            }
		</td>
    }
}
}
    
	</tr>
</table>

<table id="OrgColumns">
<tr>
@{
int MAXROW = 9;
int nextRowStart = 0;
int count = ViewBag.directsOfDirects.Count;
for (int j = 0; j < ViewBag.directsOfDirects.Count; j++)
{
    List<JObject> directList = ViewBag.directsOfDirects[j];
    // at each row start, read ahead to fill in trio row if necessary and determine next row start
    if (j == nextRowStart)
    {
        // insert a row break if we are at the natural start of a new row
        if (j != 0)
        {
                @:</tr><tr>
            }
        // read ahead 9+1 directs to emit the row of spanning trio columns
        String previousTrio = null;
        String previousUPN = null;
        int colspan = 1;
        for (int k = j; k < count; k++)
        {
            // if we have now processed one more direct report than we want on a row, break out
            if ((k - j) > MAXROW)
            {
                break;
            }

            List<JObject> dirList = ViewBag.directsOfDirects[k];
            String newTrio = (String)dirList[0][StringConstants.getExtension("trio")];
            String newUPN = (String)dirList[0]["userPrincipalName"];
            if (previousTrio == null)
            {
                // first pass, initialize previous trio
                previousTrio = newTrio;
                previousUPN = newUPN;
            }
            else if (newTrio == previousTrio)
            {
                // encountered repeat trio, increment colspan and add to UPN value
                colspan++;
                previousUPN += ",";
                previousUPN += newUPN;
                // allow row to extend to end of terminating sequence of non-trio leaders
                if (newTrio == "")
                {
                    if ((k - j) >= MAXROW)
                    {
                        // processing one past last item on prior row, start new row here (even if last in list)
                        nextRowStart = k;
                        break;
                    }
                    if (k == (count - 1))
                    {
                        // processing last in list, don't start new line
                        nextRowStart = k + 1;
                        break;
                    }
                }
            }
            if (newTrio != previousTrio || (k == (count - 1) && (k - j) < MAXROW))
            {
                // trio terminated by new trio or end of list (without exceeding max row length)
                if (previousTrio != "")  // CAN WE REMOVE THIS? WHEN WOULD IT HAPPEN?
                {
                        <td class="tdTrio" colspan ="@(colspan)">
                        <a class="tdTrio" href="/?upn=@previousUPN&trio=true">@previousTrio</a>
                        </td>
                }
                // if we are last in the list and have a trio that is different from previous, we are 1 member trio and terminator above won't get hit
                if (k == (count - 1) && newTrio != "" && newTrio != previousTrio)
                {
                        <td class="tdTrio" colspan = 1>
                        <a class="tdTrio" href="/?upn=@newUPN&trio=true">@newTrio</a>
                        </td>
                }
                // reset if terminated by new trio
                if (newTrio != previousTrio)
                {
                    // reset colspan
                    colspan = 1;
                    // next row starts here unless next trio completes before row termination
                    nextRowStart = k;
                    // store new trio
                    previousTrio = newTrio;
                    previousUPN = newUPN;
                }
                if (k == (count - 1) && (k - j) < MAXROW)
                {
                    // processing last in list, and the line isn't too long, don't start new line
                    nextRowStart = k + 1;
                }
            }
        }
        // insert a row break to close out spanning header column
            @:</tr><tr>
        }
        <td>
            <table>
                @foreach (JObject user in directList)
                {
                    <tr class="highlightable">
            		    <td style="display:none">@user["mailNickname"]</td>
                        <td class="tdPersonImage">
                            <img style="MAX-WIDTH: 50px; VERTICAL-ALIGN: bottom; MARGIN: 4px 4px 4px 4px; MAX-HEIGHT: 52px" 
                                 src=@(String.Format("{0}{1}{2}", "http://who/photos/", @user["mailNickname"], ".jpg")) 
                                 alt="@user["mailNickname"]"/>
                        </td>
            		    <td class = @((bool)user["isManager"] ? "tdManagerDescription" : "tdPersonDescription")>
                            <a href="/?upn=@user["userPrincipalName"]">@user["displayName"]</a> (@user["mailNickname"])<br />@user["jobTitle"]
            		    </td>
                    </tr>
                }
            </table>
        </td>
}
}
</tr>
</table>
</tr>
<tr>
<td class="tdFormBackground">
	<form id="MainForm" action="/" method="post">
        <fieldset> <legend>Update/Delete A User</legend>
            <div><label for="updateUPN"><pre>UPN: </pre></label> <input type="text" id="updateUPN" name="updateUPN"></div>
			<div><label for="updateDisplayName"><pre>displayName: </pre></label> <input type="text" id="updateDisplayName" name="updateDisplayName"></div>
			<div><label for="updateManagerUPN"><pre>manager: </pre></label> <input type="text" id="updateManagerUPN" name="updateManagerUPN"></div>
			<div><label for="updateJobTitle"><pre>title: </pre></label> <input type="text" id="updateJobTitle" name="updateJobTitle"></div>
			<!-- enumerate extension attributes from JSON object -->
            @foreach (JProperty property in ViewBag.extensionRegistryUser.Properties())
            {
                if (property.Name.StartsWith(StringConstants.extensionPropertyPrefix))
                {
                    @:<div><label for="@property.Name"><pre>@property.Name: </pre></label> <input type="text" id="@property.Name" name="@property.Name"></div>
                }
            }			
            <button type="submit" id="submitUpdate" name="submitButton" value="Update">Update</button>
		    <button type="submit" id="submitDelete" name="submitButton" value="Delete">Delete</button>
		</fieldset>
		<fieldset> <legend>Create A User</legend>
			<div><label for="createUPN"><pre>UPN: </pre></label> <input type="text" id="createUPN" name="createUPN"></div>
			<div><label for="createMailNickname"><pre>mailNickname: </pre></label> <input type="text" id="createMailNickname" name="createMailNickname"></div>
			<div><label for="createDisplayName"><pre>displayName: </pre></label> <input type="text" id="createDisplayName" name="createDisplayName"></div>
			<div><label for="createManagerUPN"><pre>manager: </pre></label> <input type="text" id="createManagerUPN" name="createManagerUPN"></div>
			<div><label for="createJobTitle"><pre>title: </pre></label> <input type="text" id="createJobTitle" name="createJobTitle"></div>
    		<button type="submit" id="submitCreate" name="submitButton" value="Create">Create</button>
        </fieldset>
	</form>
</td>
</tr>
</table>
<script type="text/javascript">
    var userMap = {
        @{
            string strMap = "";
            for (int i = 0; i < ViewBag.ancestorsAndMainPerson.Count; i++)
            {
                // each level could consist of one or more (in case of trio) users
                foreach (JObject user in ViewBag.ancestorsAndMainPerson[i])
                {
                    if (strMap != "") { strMap += ","; }
                    strMap += user["mailNickname"];
                    strMap += ": { displayName: \"";
                    strMap += user["displayName"];
                    strMap += "\", userPrincipalName: \"";
                    strMap += user["userPrincipalName"];
                    strMap += "\", managerPrincipalName: \"";
                    strMap += user["managerUserPrincipalName"];
                    strMap += "\", jobTitle: \"";
                    strMap += user["jobTitle"];
                    // enumerate extension attributes from JSON object
                    foreach (JProperty property in ViewBag.extensionRegistryUser.Properties())
                    {
                        if (property.Name.StartsWith(StringConstants.extensionPropertyPrefix))
                        {
                            strMap += "\", ";
                            strMap += property.Name;
                            strMap += ": \"";
                            strMap += user[property.Name];
                        }
                    }
                    strMap += "\"}";
                }
            }
            foreach (List<JObject> directList in ViewBag.directsOfDirects)
            {
                foreach (JObject user in directList)
                {
                    if (strMap != "") { strMap += ","; }
                    strMap += user["mailNickname"];
                    strMap += ": { displayName: \"";
                    strMap += user["displayName"];
                    strMap += "\", userPrincipalName: \"";
                    strMap += user["userPrincipalName"];
                    strMap += "\", managerPrincipalName: \"";
                    strMap += user["managerUserPrincipalName"];
                    strMap += "\", jobTitle: \"";
                    strMap += user["jobTitle"];
                    // enumerate extension attributes from JSON object
                    foreach (JProperty property in ViewBag.extensionRegistryUser.Properties())
                    {
                        if (property.Name.StartsWith(StringConstants.extensionPropertyPrefix))
                        {
                            strMap += "\", ";
                            strMap += property.Name;
                            strMap += ": \"";
                            strMap += user[property.Name];
                        }
                    }
                    strMap += "\"}";
                }
            }
        }
        @MvcHtmlString.Create(strMap)
    };
    function hoverOn(eventObject) {
        var $td = $("td:first", this);
        var alias = $td[0].textContent;
        var mainFormAction = "/?upn=";
        mainFormAction += userMap[alias].userPrincipalName;
        $("#MainForm").attr("action", mainFormAction);
        // enumerate attributes to set vs. hardcoding
        $("#updateUPN").val(userMap[alias].userPrincipalName);
        $("#updateDisplayName").val(userMap[alias].displayName);
        $("#updateManagerUPN").val(userMap[alias].managerPrincipalName);
        $("#updateJobTitle").val(userMap[alias].jobTitle);
        // enumerate extension attributes from JSON object
        @foreach (JProperty property in ViewBag.extensionRegistryUser.Properties())
        {
            if (property.Name.StartsWith(StringConstants.extensionPropertyPrefix))
            {
                @:$("#@property.Name").val(userMap[alias].@property.Name);
            }
        }
        $("#createManagerUPN").val(userMap[alias].userPrincipalName);
    }
    function hoverOut(eventObject) {
        //leave text in input fields on losing focus
    }
    function setHoverActions() {
        $("tr.highlightable").hover(hoverOn, hoverOut);
    }
    function setInputChange() {
        $("#updateUPN, #createUPN").each(function () {
            $(this).on("input", function () {
                var mainFormAction = "/?upn=";
                mainFormAction += this.value;
                $("#MainForm").attr("action", mainFormAction);
            });
        });
    }
    window.document.body.onload = function () {
        setHoverActions();
        setInputChange();
    }
</script>
}